df <- bind_rows(dfold, X03_22_2020, X03_23_2020, X03_24_2020, X03_25_2020, X03_26_2020,X03_27_2020 )
df$date <- mdy(df$date)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 2)
View(states)
View(X03_10_2020)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
#states <- states %>% mutate_at("death_rate", round, digits = 2)
View(states)
head(states)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 2)
head(states)
states <- gather(states, measure, value, confirmed:recovered, factor_key=TRUE)
write.csv(states, "states.csv")
runApp()
runApp()
dfold <- bind_rows(X03_10_2020,X03_11_2020,X03_12_2020,X03_13_2020,X03_14_2020,X03_15_2020,X03_16_2020,X03_17_2020,X03_18_2020,X03_19_2020,X03_20_2020,X03_21_2020)
X03_22_2020$fips <- as.character(X03_22_2020$fips)
df <- bind_rows(dfold, X03_22_2020, X03_23_2020, X03_24_2020, X03_25_2020, X03_26_2020,X03_27_2020 )
df$date <- mdy(df$date)
df <- df %>% arrange(date, date, desc(confirmed))
View(df)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 2)
states <- gather(states, measure, value, confirmed:recovered, factor_key=TRUE)
write.csv(states, "states.csv")
runApp()
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 2)
states<- states %>% arrange(date, date, desc(value))
View(states)
states <- gather(states, measure, value, confirmed:recovered, factor_key=TRUE)
states<- states %>% arrange(date, date, desc(value))
write.csv(states, "states.csv")
runApp()
runApp()
View(states)
dfold <- bind_rows(X03_10_2020,X03_11_2020,X03_12_2020,X03_13_2020,X03_14_2020,X03_15_2020,X03_16_2020,X03_17_2020,X03_18_2020,X03_19_2020,X03_20_2020,X03_21_2020)
X03_22_2020$fips <- as.character(X03_22_2020$fips)
df <- bind_rows(dfold, X03_22_2020, X03_23_2020, X03_24_2020, X03_25_2020, X03_26_2020,X03_27_2020 )
df$date <- mdy(df$date)
#df <- df %>% arrange(date, date, desc(confirmed))
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 2)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3)
states <- gather(states, measure, value, confirmed:recovered, factor_key=TRUE)
#states<- states %>% arrange(date, date, desc(value))
write.csv(states, "states.csv")
runApp()
runApp()
View(states)
dfold <- bind_rows(X03_10_2020,X03_11_2020,X03_12_2020,X03_13_2020,X03_14_2020,X03_15_2020,X03_16_2020,X03_17_2020,X03_18_2020,X03_19_2020,X03_20_2020,X03_21_2020)
X03_22_2020$fips <- as.character(X03_22_2020$fips)
df <- bind_rows(dfold, X03_22_2020, X03_23_2020, X03_24_2020, X03_25_2020, X03_26_2020,X03_27_2020 )
df$date <- mdy(df$date)
#df <- df %>% arrange(date, date, desc(confirmed))
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3)
states <- gather(states, measure, value, confirmed:deaths, factor_key=TRUE)
states<- states %>% arrange(date, date, desc(value))
write.csv(states, "states.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?absolutePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
deployApp()
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='ethan-tenison',
token='8EFA92035146D4EB378FB40AB9FAD574',
secret='EyZ8eGOHZDRYZ41Wp/ExYJZDc1qwjh7zR7SfWJgS')
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
dfold <- bind_rows(X03_10_2020,X03_11_2020,X03_12_2020,X03_13_2020,X03_14_2020,X03_15_2020,X03_16_2020,X03_17_2020,X03_18_2020,X03_19_2020,X03_20_2020,X03_21_2020)
X03_22_2020$fips <- as.character(X03_22_2020$fips)
df <- bind_rows(dfold, X03_22_2020, X03_23_2020, X03_24_2020, X03_25_2020, X03_26_2020,X03_27_2020 )
df$date <- mdy(df$date)
#df <- df %>% arrange(date, date, desc(confirmed))
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3)
states <- gather(states, measure, value, confirmed:deaths, factor_key=TRUE)
states<- states %>% arrange(date, date, desc(value))
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
else if(states$measure[i] == "deaths"){
states$measure[i] <- "Deaths"
}
else if(states$measure[i] == "recovered"){
states$measure[i] <- "Recovered"
}
}
View(states)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
states <- gather(states, measure, value, confirmed:Deaths, factor_key=TRUE)
states<- states %>% arrange(date, date, desc(value))
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
}
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
View(states)
states <- gather(states, measure, value, confirmed:Deaths, factor_key=TRUE)
states<- states %>% arrange(date, date, desc(value))
View(states)
states$measure <- as.character(states$measure)
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
}
View(states)
write.csv(states, "states.csv")
runApp()
View(states)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DataCombine")
library(DataCombine)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
state <- PercChange(states, Var = "confirmed", GroupVar = c("date", "province_state"), NewVar = "cofirmed_pct", slideBy = -1, type = "percent"  )
View(state)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
View(states)
states<- states %>% arrange(date, province_state)
View(states)
states<- states %>% arrange(province_state, date)
View(states)
str(states)
state <- PercChange(states, Var = "confirmed", GroupVar = c("date", "province_state"), NewVar = "cofirmed_pct", slideBy = -1, type = "percent"  )
View(state)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
states<- states %>% arrange(province_state, date)
states <- PercChange(states, Var = "confirmed", GroupVar = c("date", "province_state"), NewVar = "c_PercentChange", slideBy = -1, type = "percent"  )
states <- PercChange(states, Var = "Deaths", GroupVar = c("date", "province_state"), NewVar = "d_PercentChange", slideBy = -1, type = "percent"  )
states <- gather(states, measure, value, confirmed:Deaths, factor_key=TRUE)
states<- states %>% arrange(date, desc(value))
states$measure <- as.character(states$measure)
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
}
View(states)
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered)
states<- states %>% arrange(province_state, date)
states <- PercChange(states, Var = "confirmed", GroupVar = c("date", "province_state"), NewVar = "c_PercentChange", slideBy = -1, type = "percent"  )
states <- PercChange(states, Var = "Deaths", GroupVar = c("date", "province_state"), NewVar = "d_PercentChange", slideBy = -1, type = "percent"  )
View(states)
states <- gather(states, measure, value, confirmed:Deaths, factor_key=TRUE)
states<- states %>% arrange(date, desc(value))
states$measure <- as.character(states$measure)
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
}
write.csv(states, "states.csv")
runApp()
states <- df %>% filter(country_region == "US") %>% filter(province_state != "Diamond Princess") %>% filter( province_state != "Grand Princess") %>% filter( province_state != "Wuhan Evacuee")%>% filter( province_state != "Recovered") %>% filter( province_state != "recovered")%>% filter( province_state != "US" )
fix_coord <- filter(X03_19_2020, !is.na(province_state))
for (i in 1:length(states$province_state)){
for (j in 1:length(fix_coord$province_state)){
if(states$province_state[i] == fix_coord$province_state[j]){
states$lat[i] <- fix_coord$lat[j]
states$long[i] <- fix_coord$long[j]
}
}
}
states <- dplyr::select(states, -c(combined_key, fips, admin2, country_region))
states <- states %>% group_by(date, province_state,lat, long) %>% summarize(confirmed = sum(confirmed),recovered = sum(recovered), deaths = sum(deaths))
states <- mutate(states, death_rate= deaths/confirmed)
states <- states %>% mutate_at("death_rate", round, digits = 3) %>% rename(Deaths = deaths, Recovered = recovered, State = province_state)
states<- states %>% arrange(State, date)
states <- PercChange(states, Var = "confirmed", GroupVar = c("date", "State"), NewVar = "c_PercentChange", slideBy = -1, type = "percent"  )
states <- PercChange(states, Var = "Deaths", GroupVar = c("date", "State"), NewVar = "d_PercentChange", slideBy = -1, type = "percent"  )
states <- gather(states, measure, value, confirmed:Deaths, factor_key=TRUE)
states<- states %>% arrange(date, desc(value))
states$measure <- as.character(states$measure)
for (i in 1:length(states$measure)){
if(states$measure[i] == "confirmed"){
states$measure[i] <- "Confirmed Cases"
}
}
write.csv(states, "states.csv")
runApp()
df <- read.csv("states.csv")
df$value <- as.numeric(df$value)
df$date <- ymd(df$date)
View(df)
colnames(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
runApp()
runApp()
install.packages("leaflet.providers")
str(providers_default())
library(leaflet.providers)
str(providers_default())
get_providers()
str(providers_default())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?colorNumeric
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
states <- states %>% mutate_at("c_PercentChange", round, digits = 3) %>% mutate_at("d_PercentChange", round, digits = 3)
write.csv(states, "states.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
